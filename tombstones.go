package zoekt

import (
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"strconv"
	"syscall"
)

// ShardMergingEnabled returns true if SRC_ENABLE_SHARD_MERGING is set to true.
func ShardMergingEnabled() bool {
	t := os.Getenv("SRC_ENABLE_SHARD_MERGING")
	enabled, _ := strconv.ParseBool(t)
	return enabled
}

var mockRepos []*Repository

// SetTombstone idempotently sets a tombstone for repoName in .meta.
func SetTombstone(shardPath string, repoID uint32) error {
	return setTombstone(shardPath, repoID, true)
}

// UnsetTombstone idempotently removes a tombstones for reopName in .meta.
func UnsetTombstone(shardPath string, repoID uint32) error {
	return setTombstone(shardPath, repoID, false)
}

func setTombstone(shardPath string, repoID uint32, tombstone bool) error {
	var repos []*Repository
	var err error

	if mockRepos != nil {
		repos = mockRepos
	} else {
		repos, _, err = ReadMetadataPath(shardPath)
		if err != nil {
			return err
		}
	}

	for _, repo := range repos {
		if repo.ID == repoID {
			repo.Tombstone = tombstone
		}
	}

	dest := shardPath + ".meta"
	temp, err := JsonMarshalRepoMetaTemp(repos, filepath.Dir(dest), filepath.Base(dest)+".*.tmp")
	if err != nil {
		return err
	}

	err = os.Rename(temp, dest)
	if err != nil {
		os.Remove(temp)
	}

	return nil
}

// JsonMarshalRepoMetaTemp writes the JSON encoding of the repository metadata to a temporary file
// in the directory dir, and returns the name of the created file.
// The filename name is generated by taking pattern and adding a random string to the end.
// If pattern includes a "*", the random string replaces the last "*".
// If dir is the empty string, CreateTemp uses the default directory for temporary files, as returned by os.TempDir.
// It is the caller's responsibility to remove the file when it is no longer needed.
// TODO: Should we stick this in a util package?
// TODO: Maybe we should give this the path of a shard, and it returns a 3 tuple of (finalFile, tempFile, error)?
//       If we do this, we can have it automatically figure out whether it needs to write out []zoekt.Repository or just
//       zoekt.Repository. This would result in duplicate calls to zoekt.ReadMetadataPath at some of the callsites though
//       such as the one above.
func JsonMarshalRepoMetaTemp(repositoryMetadata interface{}, dir, pattern string) (tempFile string, err error) {
	b, err := json.Marshal(repositoryMetadata)
	if err != nil {
		return "", fmt.Errorf("marshalling json: %w", err)
	}

	f, err := os.CreateTemp(dir, pattern)
	if err != nil {
		return "", fmt.Errorf("writing temporary file: %s", err)
	}

	defer func() {
		f.Close()
		if err != nil {
			_ = os.Remove(f.Name())
		}
	}()

	err = f.Chmod(0o666 &^ umask)
	if err != nil {
		return "", fmt.Errorf("chmoding temporary file: %s", err)
	}

	_, err = f.Write(b)
	if err != nil {
		return "", fmt.Errorf("writing json to temporary file: %s", err)
	}

	return f.Name(), nil
}

// umask holds the Umask of the current process
var umask os.FileMode

func init() {
	umask = os.FileMode(syscall.Umask(0))
	syscall.Umask(int(umask))
}
